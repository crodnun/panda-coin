 cmake_minimum_required(VERSION 2.8.12)
 project(SimpleCoin)

 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

include(${CMAKE_BINARY_DIR}/build/conanbuildinfo.cmake)
conan_basic_setup()

include_directories(/usr/local/include/)

file(GLOB CORE_SOURCES "src/core/*.cpp")
file(GLOB SERVER_SOURCES "src/server/*.cpp")
file(GLOB EXTERNAL_SOURCES "src/external/ed25519/*.c" "src/external/murmurhash3/*.cpp")

if (UNIX)
    add_executable(tests ${CORE_SOURCES} ${SERVER_SOURCES} ${EXTERNAL_SOURCES} ./src/tests/tests.cpp)
    add_executable(server ${CORE_SOURCES} ${SERVER_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/server.cpp)
    add_executable(restore ${CORE_SOURCES} ${SERVER_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/restore.cpp)
    add_executable(cli ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/cli.cpp)
    add_executable(miner ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/miner.cpp)
    add_executable(keygen ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/keygen.cpp)
    add_executable(simulate ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/simulate.cpp)
    add_executable(benchmark ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/benchmark.cpp)
    add_executable(benchmark_miner ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/benchmark_miner.cpp)
    add_executable(txgen ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/txgen.cpp)
    if (APPLE)
        target_link_libraries(tests ${CONAN_LIBS} /usr/local/Cellar/leveldb/1.23/lib/libleveldb.a /usr/local/Cellar/snappy/1.1.9/lib/libsnappy.a)
        target_link_libraries(server ${CONAN_LIBS} /usr/local/Cellar/leveldb/1.23/lib/libleveldb.a /usr/local/Cellar/snappy/1.1.9/lib/libsnappy.a)
        target_link_libraries(restore ${CONAN_LIBS} /usr/local/Cellar/leveldb/1.23/lib/libleveldb.a /usr/local/Cellar/snappy/1.1.9/lib/libsnappy.a)
        target_link_libraries(cli ${CONAN_LIBS})
        target_link_libraries(miner ${CONAN_LIBS})
        target_link_libraries(keygen ${CONAN_LIBS})
        target_link_libraries(simulate ${CONAN_LIBS})
        target_link_libraries(benchmark ${CONAN_LIBS})
        target_link_libraries(benchmark_miner ${CONAN_LIBS})
        target_link_libraries(txgen ${CONAN_LIBS})
    endif()

    if (UNIX AND NOT APPLE)
        target_link_libraries(tests ${CONAN_LIBS} /usr/lib/x86_64-linux-gnu/libleveldb.so -lstdc++fs)
        target_link_libraries(server ${CONAN_LIBS} /usr/lib/x86_64-linux-gnu/libleveldb.so -lstdc++fs)
        target_link_libraries(restore ${CONAN_LIBS} /usr/lib/x86_64-linux-gnu/libleveldb.so -lstdc++fs)
        target_link_libraries(cli ${CONAN_LIBS} -lstdc++fs)
        target_link_libraries(miner ${CONAN_LIBS} -lstdc++fs)
        target_link_libraries(keygen ${CONAN_LIBS} -lstdc++fs)
        target_link_libraries(simulate ${CONAN_LIBS} -lstdc++fs)
        target_link_libraries(benchmark ${CONAN_LIBS} -lstdc++fs)
        target_link_libraries(benchmark_miner ${CONAN_LIBS} -lstdc++fs)
        target_link_libraries(txgen ${CONAN_LIBS} -lstdc++fs)
    endif()
endif()

if (WIN32)
    add_executable(miner ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/miner.cpp)
    add_executable(keygen ${CORE_SOURCES} ${EXTERNAL_SOURCES} ./src/tools/keygen.cpp)
    target_link_libraries(miner ${CONAN_LIBS})
    target_link_libraries(keygen ${CONAN_LIBS})
endif()    